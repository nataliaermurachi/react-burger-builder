{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","key","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.ccb6efb6.chunk.js","sourcesContent":["import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__TDt3A\",\"Label\":\"Input_Label__VAWkC\",\"InputElement\":\"Input_InputElement__2Vw0O\",\"Invalid\":\"Input_Invalid__3H-ds\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1kd2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__LRuIF\"};","import React from \"react\";\n\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.module.css\";\n\nconst checkoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nconst ContactData = props => {\n  const [orderForm, setOrderForm] = useState({name: {\n    elementType: \"input\",\n    elementConfig: {\n      type: \"text\",\n      placeholder: \"Your Name\",\n    },\n    value: \"\",\n    validation: {\n      required: true,\n    },\n    valid: false,\n    touched: false,\n  },\n  street: {\n    elementType: \"input\",\n    elementConfig: {\n      type: \"text\",\n      placeholder: \"Street\",\n    },\n    value: \"\",\n    validation: {\n      required: true,\n    },\n    valid: false,\n    touched: false,\n  },\n  zipCode: {\n    elementType: \"input\",\n    elementConfig: {\n      type: \"text\",\n      placeholder: \"ZIP Code\",\n    },\n    value: \"\",\n    validation: {\n      required: true,\n      minLength: 5,\n      maxLength: 5,\n      isNumeric: true,\n    },\n    valid: false,\n    touched: false,\n  },\n  country: {\n    elementType: \"input\",\n    elementConfig: {\n      type: \"text\",\n      placeholder: \"Country\",\n    },\n    value: \"\",\n    validation: {\n      required: true,\n    },\n    valid: false,\n    touched: false,\n  },\n  email: {\n    elementType: \"input\",\n    elementConfig: {\n      type: \"email\",\n      placeholder: \"Your E-Mail\",\n    },\n    value: \"\",\n    validation: {\n      required: true,\n      isEmail: true,\n    },\n    valid: false,\n    touched: false,\n  },\n  deliveryMethod: {\n    elementType: \"select\",\n    elementConfig: {\n      options: [\n        { value: \"fastest\", displayValue: \"Fastest\" },\n        { value: \"cheapest\", displayValue: \"Cheapest\" },\n      ],\n    },\n    value: \"fastest\",\n    validation: {},\n    valid: true,\n  }}); \n  const [formIsValid, setFormIsValid] = useState(false);\n  \n\n  const orderHandler = (event) => {\n    event.preventDefault();\n    const formData = {};\n    for (let formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: props.ings,\n      price: props.price,\n      orderData: formData,\n      userId: props.userId,\n    };\n    props.onOrderBurger(order, props.token);\n  };\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(\n      orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          orderForm[inputIdentifier].validation\n        ),\n        touched: true,\n      }\n    );\n    const updatedOrderForm = updateObject(orderForm, {\n      [inputIdentifier]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n\n    const formElementsArray = [];\n    for (let key in orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: orderForm[key],\n      });\n    }\n    let form = (\n      <form onSubmit={orderHandler}>\n        {formElementsArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType=\"Success\" disabled={!formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\n\nconst mapDispatchBurgerProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchBurgerProps\n)(withErrorHandler(ContactData, axios));\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"./ContactData/ContactData\";\n\nconst Checkout = props => {\n  const checkoutCancelledHandler = () => {\n    props.history.goBack();\n  };\n\n  const checkoutContinuedHandler = () => {\n    props.history.replace(\"/checkout/contact-data\");\n  };\n\n    let summary = <Redirect to=\"/\" />;\n\n    if (props.ings) {\n      const purchasedRedirect = props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={props.ings}\n            checkoutCancelled={checkoutCancelledHandler}\n            checkoutContinued={checkoutContinuedHandler}\n          />\n          <Route\n            path={props.match.path + \"/contact-data\"}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased,\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}