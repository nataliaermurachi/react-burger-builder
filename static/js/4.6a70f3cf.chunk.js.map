{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","key","id","config","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.6a70f3cf.chunk.js","sourcesContent":["import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__TDt3A\",\"Label\":\"Input_Label__VAWkC\",\"InputElement\":\"Input_InputElement__2Vw0O\",\"Invalid\":\"Input_Invalid__3H-ds\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1AjwA\"};","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../shared/utility\";\n\nconst Auth = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Mail Address\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    password: {\n      elementType: \"password\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6,\n      },\n      valid: false,\n      touched: false,\n    },\n  });\n  const [isSignup, setIsSignup] = useState(true);\n  \n  const {buildingBurger, authRedirectPath, onSetAuthRedirectPath} = props;\n  useEffect(() => {\n    if (!buildingBurger && authRedirectPath !== \"/\") {\n      onSetAuthRedirectPath();\n    }\n  }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(authForm, {\n      [controlName]: updateObject(authForm[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          authForm[controlName].validation\n        ),\n        touched: true,\n      }),\n    });\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onAuth(\n      authForm.email.value,\n      authForm.password.value,\n      isSignup\n    );\n  };\n  const switchAuthModeHandler = () => {\n    setIsSignup(!isSignup);\n  };\n \n    const formElementsArray = [];\n    for (let key in authForm) {\n      formElementsArray.push({\n        id: key,\n        config: authForm[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(event) => inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    if (props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (props.error) {\n      errorMessage = <p>{props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (props.isAuthenticated) {\n      authRedirect = <Redirect to={props.authRedirectPath} />;\n    }\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n          <Button clicked={switchAuthModeHandler} btnType=\"Danger\">\n            SWITCH TO {isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n          </Button>\n        </form>\n      </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}